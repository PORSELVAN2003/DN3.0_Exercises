Exercise 1: Implementing the Singleton Pattern

public class Logger {
    
    private static Logger instance;

    
    private Logger() {
            }

   
    public static synchronized Logger getInstance() {
        if (instance == null) {
            instance = new Logger();
        }
        return instance;
    }

    
    public void log(String message) {
        System.out.println("LOG: " + message);
    }
    public static void main(String[] args) {
        
        Logger logger1 = Logger.getInstance();
        Logger logger2 = Logger.getInstance();

        
        if (logger1 == logger2) {
            System.out.println(" Both are same .");
        } else {
            System.out.println("Singleton is Diffrent.");
        }

        
        logger1.log("This is a log message.");
        logger2.log("This is another log message.");
    }
}

Exercise 2: Implementing the Factory Method Pattern


Exercise 3: Implementing the Builder Pattern

public class Computer {
    private String CPU;
    private String RAM;
    private String storage;
    private String GPU;
    private String motherboard;
    private boolean hasCoolingSystem;

    private Computer(Builder builder) {
        this.CPU = builder.CPU;
        this.RAM = builder.RAM;
        this.storage = builder.storage;
        this.GPU = builder.GPU;
        this.motherboard = builder.motherboard;
        this.hasCoolingSystem = builder.hasCoolingSystem;
    }

    @Override
    public String toString() {
        return "Computer [CPU=" + CPU + ", RAM=" + RAM + ", storage=" + storage + ", GPU=" + GPU 
               + ", motherboard=" + motherboard + ", hasCoolingSystem=" + hasCoolingSystem + "]";
    }

    // Getters
    public String getCPU() {
        return CPU;
    }

    public String getRAM() {
        return RAM;
    }

    public String getStorage() {
        return storage;
    }

    public String getGPU() {
        return GPU;
    }

    public String getMotherboard() {
        return motherboard;
    }

    public boolean isHasCoolingSystem() {
        return hasCoolingSystem;
    }

    
    public static class Builder {
        private String CPU;
        private String RAM;
        private String storage;
        private String GPU;
        private String motherboard;
        private boolean hasCoolingSystem;

        public Builder setCPU(String CPU) {
            this.CPU = CPU;
            return this;
        }

        public Builder setRAM(String RAM) {
            this.RAM = RAM;
            return this;
        }

        public Builder setStorage(String storage) {
            this.storage = storage;
            return this;
        }

        public Builder setGPU(String GPU) {
            this.GPU = GPU;
            return this;
        }

        public Builder setMotherboard(String motherboard) {
            this.motherboard = motherboard;
            return this;
        }

        public Builder setHasCoolingSystem(boolean hasCoolingSystem) {
            this.hasCoolingSystem = hasCoolingSystem;
            return this;
        }

        public Computer build() {
            return new Computer(this);
        }
    }
    
    
 
    
        public static void main(String[] args) {
            Computer gamingPC = new Computer.Builder()
                    .setCPU("Intel Core i9")
                    .setRAM("32GB")
                    .setStorage("1TB SSD")
                    .setGPU("NVIDIA RTX 3090")
                    .setMotherboard("ASUS ROG Strix")
                    .setHasCoolingSystem(true)
                    .build();

            Computer officePC = new Computer.Builder()
                    .setCPU("Intel Core i5")
                    .setRAM("16GB")
                    .setStorage("512GB SSD")
                    .setMotherboard("Gigabyte B450")
                    .build();

            Computer basicPC = new Computer.Builder()
                    .setCPU("Intel Core i3")
                    .setRAM("8GB")
                    .setStorage("256GB SSD")
                    .build();

            System.out.println("Gaming PC: " + gamingPC);
            System.out.println("Office PC: " + officePC);
            System.out.println("Basic PC: " + basicPC);
        }
    }



Exercise 4: Implementing the Adapter Pattern

    
    








